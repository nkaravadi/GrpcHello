## Steps to run Grpc Hello StatefulSet and apply istio routing by headers

########################
# COMMON STEPS (Colima, Kind, Istio)
########################
#Start Colima - we need extra memory - set aside 60GiB
colima start --memory 6

#Create kind nodes - 1 control plane & 2 workers
kind create cluster --config kind/kind-config.yaml

#Set up Colima/Kind networking so it works like AKS
./SetupNetWorking.sh 

#Setup the Load Balancer
kubectl apply -f metallb/metallb-native.yaml
kubectl wait --namespace metallb-system --for=condition=ready pod --selector=app=metallb --timeout=90s
kubectl apply -f metallb/metallb-conf.yaml 

#Setup istio with nice defaults
istioctl install --set profile=demo -y

# Istio sidecars automatically installed in default namespace
kubectl label namespace default istio-injection=enabled

# Echo the istio gateway
export INGRESS_NAME=istio-ingressgateway
export INGRESS_NS=istio-system
kubectl get svc "$INGRESS_NAME" -n "$INGRESS_NS"

export INGRESS_HOST=$(kubectl -n "$INGRESS_NS" get service "$INGRESS_NAME" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
export INGRESS_PORT=$(kubectl -n "$INGRESS_NS" get service "$INGRESS_NAME" -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
export SECURE_INGRESS_PORT=$(kubectl -n "$INGRESS_NS" get service "$INGRESS_NAME" -o jsonpath='{.spec.ports[?(@.name=="https")].port}')
export TCP_INGRESS_PORT=$(kubectl -n "$INGRESS_NS" get service "$INGRESS_NAME" -o jsonpath='{.spec.ports[?(@.name=="tcp")].port}')

echo INGRESS_HOST $INGRESS_HOST
echo INGRESS_PORT $INGRESS_PORT
echo SECURE_INGRESS_PORT $SECURE_INGRESS_PORT
echo TCP_INGRESS_PORT $TCP_INGRESS_PORT

#######################
# Monitoring - add kiali and prometheus
#######################
kubectl apply -f istio/addons/kiali.yaml
kubectl apply -f istio/addons/prometheus.yaml

########################
# Grpc Hello App
########################
kubectl apply -f kubectl/stateful-grpc-pod-svc.yaml
kubectl apply -f kubectl/istio-stateful-grpc-pod-svc-pod-routes.yaml

# CHECK
istioctl analyze

#######################
# Send requests and check
#######################
# istioctl dashboard kiali &
# Check OpenLens

# Postman requests :
#     




########################
# Tear Down everthing
########################
#Delete everything

kind delete cluster --name kind-multi-node
colima stop


#Complete testing
